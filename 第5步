5. 学习Java的面向对象编程，包括类、修饰符、引用类型和值类型的区别、成员、方法、访问控制、继承、多态、接口、接口实现。
顺便学习一下面向对象的基本思想，即对象、消息、封装、继承、多态等，这些通用的内容不是Java特有的。
(1)类
  java类的基本构成：包，引入，类，变量，方法，注释
  package mypackage             //定义包
  import java.util.*            //引入类
  
  public class helloworld{      //定义类
    private String hello = "helloworld";    //变量
    public void say(){                        //方法
        System.out.println(hello);
    }
  }
  
  包：我们把功能相似的类放在一个包中
  引入(import):引入类后就能用类中的各种函数功能
  类：java程序的基本单位
  变量，函数就不多说了。
(2)修饰符
  a类的修饰符
    抽象类 abstract(注意抽象类与接口的区别)
      抽象类就是没有具体对象的概念类，抽象类是它所有子类的公共属性的集合
      比如：我们要描述“水果”，它就是一个抽象，它有质量、体积等一些共性（水果有质量），
      但又缺乏特性（苹果、橘子都是水果，它们有自己的特性），我们拿不出唯一一种能代表水果的东西
      在面向对象领域，抽象类主要用来进行类型隐藏。我们可以构造出一个固定的一组行为的抽象描述，但是这组行为却能够有任意个可能的具体实现方式。
      这个抽象描述就是抽象类，而这一组任意个可能的具体实现则表现为这个抽象类的所有派生类。
      抽象类提供了继承的概念，它的出发点就是为了继承，否则它没有存在的任何意义。所以说定义的抽象类一定是用来继承的，同时在
      一个以抽象类为节点的继承关系等级链中，叶子节点一定是具体的实现类。
         1、抽象类不能被实例化，实例化的工作应该交由它的子类来完成，它只需要有一个引用即可。
         2、抽象方法必须由子类来进行重写。
         3、只要包含一个抽象方法的抽象类，该方法必须要定义成抽象类，不管是否还包含有其他方法。
         4、抽象类中可以包含具体的方法，当然也可以不包含抽象方法。
         5、子类中的抽象方法不能与父类的抽象方法同名。
         6、abstract不能与final并列修饰同一个类。
         7、abstract 不能与private、static、final或native并列修饰同一个方法。、
    最终类 final
      如果一个类被final修饰，则这个类不可能有子类
      被定义为final的类通常是一些有固定作用、用来完成标准功能的类
      如Socket等类
  b变量的修饰符
    静态变量 static
      静态变量是类中所有对象的共享的变量，是公共的存储单元
      注意，敲黑板：静态变量一旦赋值，不可改变。
    最终变量 final
      其修饰代表常量，不可改变，修饰的同时指出常量的具体取值
    异失变量 volatile
      如果一个域被volatile修饰，则说明其可能同时被多个线程所控制、修改，即此域不仅仅被当前程序所掌握，在运行过程中极有可能受到其他线程的影响
      volatile String world = "world";
      通常volatile用来修饰解释外部输入的量，如表示当前时间的变量，后台线程随时修改。
  c方法的修饰符
    抽象方法 abstract
      此方法仅有方法头，没有具体的方法体和操作实现的方法。其目的是为了所有子类对外呈现一个相同名字的方法，是一个统一的接口。所有抽象方法必须存在
      与抽象类中。
      该方法必须由子类来实现，才能被调用。
    静态方法 static
      可以像调用静态变量一样，直接通过类名调用静态方法。(Hello.say())
      调用此方法时用类名做前缀。此方法只能处理属于整个类的成员变量
    最终方法 final
      功能和内部语句不能再更改，不能再被继承
    同步方法 synchronized
      如果其修饰的是类的方法（static的方法，静态方法），在被调用执行前，将把系统类class中对应当前类的对象加锁。
      如果其修饰的是对象的方法（没有static修饰的方法），在被调用执行前，把当前对象加锁。
(3)引用类型与值类型的区别
  跟之前说的差不多，传的是引用还是值
  引用类型表示你操作的数据是同一个，也就是说当你传一个参数给另一个方法时，你在另一个方法中改变这个变量的值，
  那么调用这个方法是传入的变量的值也将改变.
  值类型表示复制一个当前变量传给方法，当你在这个方法中改变这个变量的值时，最初生命的变量的值不会变.
  值类型：
    也就是基本数据类型
  引用类型：
    除了四类八种基本类型外，所有的类型都称为引用类型（数组，类，接口，字符串）
(4)成员
  java类有成员和方法
  成员就是指 某一类事物的属性
  例如 人类的属性有：姓名 性别 年龄等
  public class Student {
    private String name ;//name是Student的成员变量
    public String getName(){ //getName就是成员方法，定义在Student中的方法
      return this.name ;
    }
  }
(5)方法
  就是函数，所谓方法,就是用来解决一类问题的代码的有序组合,是一个功能模块。
(6)访问控制
  访问控制符
    可见/访问性	在同一类中	同一包中	不同包中 	同一包子类中 	不同包子类中 
    public	    yes	      yes	     yes	    yes	         yes                      任意地方都可以访问
    protected 	yes	      yes	     no	      yes	         yes                      同一包和子类可以访问
    package 	  yes	      yes	     no	      yes	         no
    private	    yes	      no	     no	      no	         no                       仅该类内部可访问
    （1） 在java中有public、protected、private三种显示的修饰符用于控制可见性，package不是显示的修饰符，
         它是隐含的，即如果在类、变量等前没加显示的可见性修饰符，那它就是package级别的。如果在类的定义中没有指定package，
         那么java会把它放在缺省包中，一般来说这个缺省的包就是当前目录。
    （2）在子类中的方法如果重载了父类的方法，那么该方法的可见级别应更底或者相同，如父类中的方法是public，
        那么子类中方法必须是public。
    （3）在java中，一般来说，变量成员最好是private，对它们的访问可以通过public的方法，在这些方法中可以做些控制以保证数据
        的一致性。这些方法名一般以get和set做为前缀。
  
  
  
  
  
  
  
  
  
  
