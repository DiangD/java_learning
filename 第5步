5. 学习Java的面向对象编程，包括类、修饰符、引用类型和值类型的区别、成员、方法、访问控制、继承、多态、接口、接口实现。
顺便学习一下面向对象的基本思想，即对象、消息、封装、继承、多态等，这些通用的内容不是Java特有的。
(1)类
  java类的基本构成：包，引入，类，变量，方法，注释
  package mypackage             //定义包
  import java.util.*            //引入类
  
  public class helloworld{      //定义类
    private String hello = "helloworld";    //变量
    public void say(){                        //方法
        System.out.println(hello);
    }
  }
  
  包：我们把功能相似的类放在一个包中
  引入(import):引入类后就能用类中的各种函数功能
  类：java程序的基本单位
  变量，函数就不多说了。
(1)修饰符
  a类的修饰符
    抽象类 abstract(注意抽象类与接口的区别)
      抽象类就是没有具体对象的概念类，抽象类是它所有子类的公共属性的集合
      比如：我们要描述“水果”，它就是一个抽象，它有质量、体积等一些共性（水果有质量），
      但又缺乏特性（苹果、橘子都是水果，它们有自己的特性），我们拿不出唯一一种能代表水果的东西
      在面向对象领域，抽象类主要用来进行类型隐藏。我们可以构造出一个固定的一组行为的抽象描述，但是这组行为却能够有任意个可能的具体实现方式。
      这个抽象描述就是抽象类，而这一组任意个可能的具体实现则表现为这个抽象类的所有派生类。
    最终类 final
      如果一个类被final修饰，则这个类不可能有子类
      被定义为final的类通常是一些有固定作用、用来完成标准功能的类
      如Socket等类
  b变量的修饰符
    静态变量 static
      静态变量是类中所有对象的共享的变量，是公共的存储单元
      注意，敲黑板：静态变量一旦赋值，不可改变。
    最终变量 final
      其修饰代表常量，不可改变，修饰的同时指出常量的具体取值
    异失变量 volatile
      如果一个域被volatile修饰，则说明其可能同时被多个线程所控制、修改，即此域不仅仅被当前程序所掌握，在运行过程中极有可能受到其他线程的影响
      volatile String world = "world";
      通常volatile用来修饰解释外部输入的量，如表示当前时间的变量，后台线程随时修改。
